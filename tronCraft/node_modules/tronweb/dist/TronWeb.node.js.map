{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"axios\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","keys","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$originEnergy","originEnergyLimit","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","return","_this6","proposalID","proposal_id","deleteProposal","_this7","isApproval","is_add_approval","voteProposal","tokenName","tokenBalance","trxBalance","ownerAddress","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createTRXExchange","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","_this8","exchangeID","tokenAmount","exchange_id","token_id","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","raw_data","_context","t0","account","_ref5","getAccount","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","_context6","_context7","_context8","proposal","getProposal","listProposals","_ref17","_ref17$proposals","proposals","getChainParameters","_ref18","_ref18$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref19","_ref19$exchanges","exchanges","_ref20","_ref20$exchanges","getFunctionSelector","getParamTypes","method_decodeOutput","filter","_ref3","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","test","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","size","page","info","routeParams","response","getEventByTransactionID","val","fromDecimal","typeof_default","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"axios\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            originEnergyLimit = 10_000_000,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isInteger(originEnergyLimit) || originEnergyLimit < 0)\n            return callback('Invalid options.originEnergyLimit provided');\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if (!utils.isArray(parameters)) {\n            parameters = [parameters];\n        }\n\n        for (let parameter of parameters) {\n            if(!utils.isObject(parameter))\n                return callback('Invalid parameters provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(isApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if (!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(trxBalance) || trxBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenName) || !firstTokenName.length)\n            return callback('Invalid firstTokenName provided');\n\n        if (!utils.isString(secondTokenName) || !secondTokenName.length)\n            return callback('Invalid secondTokenName provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: this.tronWeb.fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n                \n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress', \n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n            \n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, size = 20, page = 1, callback = false) {\n\n        if(utils.isFunction(page)) {\n            callback = page;\n            page = 1;\n        }\n\n        if(utils.isFunction(size)) {\n            callback = size;\n            size = 20;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber, size, page);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        if(size > 200) {\n            console.info('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}&size=${size}&page=${page}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}